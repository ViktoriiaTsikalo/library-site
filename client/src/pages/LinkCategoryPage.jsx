import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';
import axios from 'axios';
import css from './LinkCategoryPage.module.css';
import { AddLinkModal } from '../components/AddLinkModal/AddLinkModal.jsx';

export const LinkCategoryPage = () => {
  const { category } = useParams();
  const [links, setLinks] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [showModal, setShowModal] = useState(false);
  const token = localStorage.getItem('token');

  const fetchLinks = async (page = 1) => {
    try {
      const res = await axios.get(`http://localhost:3000/api/links`, {
        params: {
          category,
          page,
          limit: 10,
        },
      });
      if (page === 1) {
        setLinks(res.data.links); // –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
      } else {
        setLinks(prev => [...prev, ...res.data.links]);
      }
      setTotalPages(res.data.totalPages);
    } catch {
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω—å');
    }
  };

  useEffect(() => {
    setPage(1);
    fetchLinks(1);
  }, [category]);

  useEffect(() => {
    if (page > 1) fetchLinks(page);
  }, [page]);

  const handleLinkAdded = () => {
    setShowModal(false);
    setPage(1);
    fetchLinks(1);
  };

  const handleDelete = async (id) => {
    if (!window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è?')) return;
    try {
      await axios.delete(`http://localhost:3000/api/links/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setPage(1);
      fetchLinks(1);
    } catch {
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
    }
  };

  const titleMap = {
    teachers: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤',
    students: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —É—á–Ω—ñ–≤',
    parents: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –±–∞—Ç—å–∫—ñ–≤',
  };

  return (
    <div className={css.wrapper}>
      <h1 className={css.title}>{titleMap[category] || '–ü–æ—Å–∏–ª–∞–Ω–Ω—è'}</h1>

      <ul className={css.linkList}>
        {links.map((link) => (
          <li key={link._id} className={css.linkItem}>
            <div className={css.linkContent}>
              <a href={link.url} target="_blank" rel="noopener noreferrer" className={css.linkTitle}>
                üîó {link.title}
              </a>
              {link.grade && <p className={css.meta}>üéì –ö–ª–∞—Å: {link.grade}</p>}
              {link.author && <p className={css.meta}>‚úçÔ∏è –ê–≤—Ç–æ—Ä: {link.author}</p>}
              {token && (
                <button className={css.deleteButton} onClick={() => handleDelete(link._id)}>
                  üóë –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
              )}
            </div>
          </li>
        ))}
      </ul>

      {page < totalPages && (
        <button className={css.addButton} onClick={() => setPage(prev => prev + 1)}>
          –ü–æ–∫–∞–∑–∞—Ç–∏ –±—ñ–ª—å—à–µ
        </button>
      )}

      {token && (
        <button className={css.addButton} onClick={() => setShowModal(true)}>
          ‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        </button>
      )}

      {showModal && (
        <AddLinkModal
          category={category}
          onClose={() => setShowModal(false)}
          onLinkAdded={handleLinkAdded}
        />
      )}
    </div>
  );
};
